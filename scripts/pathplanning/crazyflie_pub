#!/usr/bin/env python

import math
import rospy
import tf2_ros
import tf2_geometry_msgs
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from crazyflie_driver.msg import Position

#import simple_localization 


# Current goal (global state)
goal = None

drone_origin_x = 0
drone_origin_y = 0
drone_origin_oz = 0
drone_origin_ow = 0

# drone_pose = None


def d_pose_callback(msg):
    global drone_origin_x
    global drone_origin_y

    drone_origin_x = msg.pose.orientation.x
    drone_origin_y = msg.pose.orientation.y

def pose_callback(msg):
    global drone_pose
    drone_pose = msg


def goal_callback(msg):
    global goal

    # RViz's "2D Nav Goal" publishes z=0, so add some altitude if needed.
    if msg.pose.position.z == 0.0:
        msg.pose.position.z = 0.3

    rospy.loginfo('New goal set:\n%s', msg)
    goal = msg

def publish_cmd(goal):
    global drone_pose
    global drone_origin_x
    global drone_origin_y
    global drone_origin_oz
    global drone_origin_ow

    # Need to tell TF that the goal was just generated
    goal.header.stamp = rospy.Time.now()

    if not tf_buf.can_transform(goal.header.frame_id, 'cf1/odom', goal.header.stamp):
        rospy.logwarn_throttle(5.0, 'No transform from %s to cf1/odom' % goal.header.frame_id)
        return

    goal_odom = tf_buf.transform(goal, 'cf1/odom')

    cmd = Position()

    cmd.header.stamp = rospy.Time.now()
    cmd.header.frame_id = goal_odom.header.frame_id

    # goal_odom.pose.orientation.x = goal_odom.pose.position.x 
    # goal_odom.pose.orientation.y = goal_odom.pose.position.y 

    cmd.x = goal_odom.pose.position.x + drone_pose.pose.position.x - drone_origin_x
    cmd.y = goal_odom.pose.position.y + drone_pose.pose.position.y - drone_origin_y
    cmd.z = goal_odom.pose.position.z


    roll, pitch, yaw = euler_from_quaternion((goal_odom.pose.orientation.x,
                                              goal_odom.pose.orientation.y,
                                              goal_odom.pose.orientation.z  + drone_pose.pose.orientation.z - drone_origin_oz,
                                              goal_odom.pose.orientation.w + drone_pose.pose.orientation.w - drone_origin_ow))

    cmd.yaw = math.degrees(yaw)

    pub_cmd.publish(cmd)


rospy.init_node('crazyflie_pub')

drone_pose_origin = rospy.Subscriber('/cf1/pose', PoseStamped, d_pose_callback)
drone_pose_origin = rospy.Subscriber('/localization', PoseStamped, pose_callback)


sub_goal = rospy.Subscriber('/debug_pose', PoseStamped, goal_callback)
pub_cmd  = rospy.Publisher('/cf1/cmd_position', Position, queue_size=3)
tf_buf   = tf2_ros.Buffer()	
tf_lstn  = tf2_ros.TransformListener(tf_buf)

def main():
    rate = rospy.Rate(30)  # Hz
    while not rospy.is_shutdown():
        if goal:
            publish_cmd(goal)
        rate.sleep()

if __name__ == '__main__':
    main()
