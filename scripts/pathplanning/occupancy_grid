#!/usr/bin/env python

import rospy
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from nav_msgs.msg import OccupancyGrid, Path, MapMetaData
import json
import math
import numpy as np
import matplotlib.pyplot as plt


# Load world JSON
with open('/home/maverick/dd2419_ws/src/course_packages/dd2419_resources/worlds_json/comp_without_signs.world.json') as f:
	world = json.load(f)


# Initialize occupancy grid message
class map_grid:

	def __init__(self):
		self.origin_x = world['airspace']['min'][0]
		self.origin_y = world['airspace']['min'][1]
		self.height = 101
		self.width = 121
		self.resolution = 0.05
		self.frame_id = '/map'
		self.img = np.zeros((self.height, self.width), np.uint8) #width/reso and height/reso?
		
		#Publishers
		self.map_pub = rospy.Publisher('map', OccupancyGrid, queue_size=10, latch=True)
		self.map_metadata_pub = rospy.Publisher('map_metadata', MapMetaData, queue_size=10, latch=True)
		#rospy.spin() ??
		#self.img = np.zeros(shape=(5,5))
		#print empty grid
		'''
		for i in range(self.height):
			for j in range(self.width):
				print '{:4}'.format(self.img[i][j]),
			print
		'''
		self.boundary(world)
		self.walls(world)
		self.gates(world)

	def boundary(self,world):
		min_x = world['airspace']['min'][0]
		min_y = world['airspace']['min'][1]
		max_x = world['airspace']['max'][0]
		max_y = world['airspace']['max'][1]

		(min_i,min_j) = self.coord_to_indices(min_x, min_y)
		(max_i,max_j) = self.coord_to_indices(max_x, max_y)

		for i in range(min_i,max_i + 1):
			j = min_j
			self.img[j][i] = 100
			plt.plot(i,j,'rs')

		for i in range(min_i,max_i + 1):
			j = max_j
			self.img[j][i] = 100
			plt.plot(i,j,'rs')

		for j in range(min_j,max_j + 1):
			i = min_i
			self.img[j][i] = 100
			plt.plot(i,j,'rs')

		for j in range(min_j,max_j + 1):
			i = max_i
			self.img[j][i] = 100
			plt.plot(i,j,'rs')


	def walls(self,world):
		p = 0
		for plane in world['walls']:

			x1 = world['walls'][p]['plane']['start'][0]
			y1 = world['walls'][p]['plane']['start'][1]

			(i1,j1) = self.coord_to_indices(x1, y1)
			
			x2 = world['walls'][p]['plane']['stop'][0]
			y2 = world['walls'][p]['plane']['stop'][1]
			
			(i2,j2) = self.coord_to_indices(x2, y2)
			
			if i1 == i2:
				i = i1
				for j in range(min(j1,j2),max(j1,j2)+1):
					self.img[j][i] = 100
					#print(i,j)
					plt.plot(i,j,'rs')
			else:
				increment = (j1-j2)/(i1-i2)
				if min(i1,i2)==i1:
					j = j1
				else:
					j = j2

				for i in range(min(i1,i2),max(i1,i2)+1):
					self.img[j][i] = 100
					plt.plot(i,j,'rs')
					j += increment

			#for j in range(self.height):
			#	for i in range(self.width):
			#		print '{:4}'.format(self.img[i][j]),
			#	print
			p += 1

	def gates(self,world):
		p = 0
		for id in world['gates']:
			h = world['gates'][p]['heading'] - 90

			a = world['gates'][p]['position'][0]

			b = world['gates'][p]['position'][1]


			(x1,y1) = (a + 0.2*math.cos(math.radians(h)),b + 0.2*math.sin(math.radians(h)))
			(x2,y2) = (a + 0.3*math.cos(math.radians(h)),b + 0.3*math.sin(math.radians(h)))
			(x3,y3) = (a - 0.2*math.cos(math.radians(h)),b - 0.2*math.sin(math.radians(h)))
			(x4,y4) = (a - 0.3*math.cos(math.radians(h)),b - 0.3*math.sin(math.radians(h)))


			(i1,j1) = self.coord_to_indices(x1, y1)
			(i2,j2) = self.coord_to_indices(x2, y2)

			(i3,j3) = self.coord_to_indices(x3, y3)
			(i4,j4) = self.coord_to_indices(x4, y4)

			if i1 == i2:
				i = i1
				for j in range(min(j1,j2),max(j1,j2)+1):
					self.img[j][i] = 100
					#print(i,j)
					plt.plot(i,j,'rs')
			else:
				increment = (j1-j2)/(i1-i2)
				if min(i1,i2)==i1:
					j = j1
				else:
					j = j2

				for i in range(min(i1,i2),max(i1,i2)+1):
					self.img[j][i] = 100
					plt.plot(i,j,'rs')
					j += increment

			if i3 == i4:
				i = i3
				for j in range(min(j3,j4),max(j3,j4)+1):
					self.img[j][i] = 100
					#print(i,j)
					plt.plot(i,j,'rs')
			else:
				increment = (j3-j4)/(i3-i4)
				if min(i3,i4)==i3:
					j = j3
				else:
					j = j4

				for i in range(min(i3,i4),max(i3,i4)+1):
					self.img[j][i] = 100
					plt.plot(i,j,'rs')
					j += increment

			#for j in range(self.height):
			#	for i in range(self.width):
			#		print '{:4}'.format(self.img[i][j]),
			#	print
			p += 1
		#plt.show()
		self.publish_map()

	def coord_to_indices(self, x, y):
		j = int(round((y - self.origin_y) / self.resolution,1))
		i = int(round((x - self.origin_x) / self.resolution,1))
		return (i, j)

	def to_message(self):
		grid_msg = OccupancyGrid()
		#Header
		grid_msg.header.stamp = rospy.Time.now()
		grid_msg.header.frame_id = 'map'

		#info nav_msgs/MapMetaData to_message
		grid_msg.info.resolution = self.resolution
		grid_msg.info.width = self.width
		grid_msg.info.height = self.height

		#Map origin
		grid_msg.info.origin = Pose(Point(self.origin_x,self.origin_y,0.), Quaternion(0.,0.,0.,1.))

		#Data int8
		flat_grid = self.img.reshape((self.img.size,))
		grid_msg.data = list(np.round(flat_grid,))
		return grid_msg




	def publish_map(self):
		grid_msg = self.to_message()
		self.map_metadata_pub.publish(grid_msg.info)
		self.map_pub.publish(grid_msg)





def main():
	rospy.init_node("occupancy_grid")
	mapper = map_grid()
	rospy.spin()

main()
